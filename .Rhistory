install.packages("hBayesDM", dependencies=TRUE)
Sys.setenv(BUILD_ALL='true')  # Build all the models on installation
Sys.setenv(MAKEFLAGS='-j 4')  # Use 4 cores for compilation (or the number you want)
install.packages("hBayesDM")  # Install from CRAN
install.packages("hBayesDM", dependencies=TRUE)
Sys.setenv(BUILD_ALL='true')  # Build all the models on installation
Sys.setenv(MAKEFLAGS='-j 4')  # Use 4 cores for compilation (or the number you want)
install.packages("hBayesDM")  # Install from CRAN
## or
devtools::install_github("CCS-Lab/hBayesDM")  # Install from GitHub
library(hBayesDM)
install.packages("hBayesDM")  # Install from CRAN
install.packages("hBayesDM")
library(hBayesDM)
library(devtools)
library(hBayesDM)
library(rstan)
deck5<-igt_pvl_delta(data = "G:/My Drive/EP_Year1/IGT analysis/Rmodeling/igt_deck5.txt",niter = 4000, nwarmup = 1000,
nchain = 4, ncore = 1, nthin = 1, inits = "vb",
indPars = "mean", modelRegressor = FALSE, vb = FALSE,
inc_postpred = FALSE, adapt_delta = 0.95, stepsize = 1,
max_treedepth = 10)
deck5<-igt_pvl_delta(data = "G:/My Drive/EP_Year1/IGT analysis/Rmodeling/igt_deck5.txt",niter = 4000, nwarmup = 1000,
nchain = 4, ncore = 1, nthin = 1, inits = "1.5",
indPars = "mean", modelRegressor = FALSE, vb = FALSE,
inc_postpred = FALSE, adapt_delta = 0.95, stepsize = 1,
max_treedepth = 10)
deck5<-igt_pvl_delta(data = "G:/My Drive/EP_Year1/IGT analysis/Rmodeling/igt_deck5.txt",niter = 4000, nwarmup = 1000,
nchain = 4, ncore = 1, nthin = 1, inits = "1,1.5,2,3",
indPars = "mean", modelRegressor = FALSE, vb = FALSE,
inc_postpred = FALSE, adapt_delta = 0.95, stepsize = 1,
max_treedepth = 10)
output<-igt_pvl_delta(data = "G:/My Drive/EP_Year1/IGT analysis/Rmodeling/igt_data2.txt", niter = 4000, nwarmup = 1000,
nchain = 4, ncore = 1, nthin = 1, inits = "vb",
indPars = "mean", modelRegressor = FALSE, vb = FALSE,
inc_postpred = FALSE, adapt_delta = 0.95, stepsize = 1,
max_treedepth = 10)
plot(output, type = "trace")
printFit(output)
deck5<-igt_pvl_delta(data = "G:/My Drive/EP_Year1/IGT analysis/Rmodeling/igt_deck5.txt",niter = 4000, nwarmup = 1000,
nchain = 4, ncore = 1, nthin = 1, inits = "vb",
indPars = "mean", modelRegressor = FALSE, vb = FALSE,
inc_postpred = FALSE, adapt_delta = 0.95, stepsize = 1,
max_treedepth = 10)
# Plot the posterior distributions of the hyper-parameters (distributions should be unimodal)
plot(output)
# Show the WAIC and LOOIC model fit estimates
printFit(output)
# Check Rhat values (all Rhat values should be less than or equal to 1.1)
rhat(deck5) #checked and good for this model!
# Check Rhat values (all Rhat values should be less than or equal to 1.1)
rhat(output) #checked and good for this model!
diffDist = output$parVals$mu_lambda - deck5$parVals$mu_lambda  # group1 - group2
HDIofMCMC( diffDist )  # Compute the 95% Highest Density Interval (HDI).
plotHDI( diffDist )
graph<-plot(deck5, plotfun ="rhat")
graph2<-plot(output, plotfun ="rhat")
graph<-plot(deck5, plotfun ="rhat")
plot(output, show_density = TRUE, ci_level = 0.5, fill_color = "purple")
plot(output, plotfun = "hist", pars = "theta", include = FALSE)
plot(output, plotfun = "trace", pars = c("mu", "tau"), inc_warmup = TRUE)
plot(output, plotfun = "rhat") + ggtitle("Example of adding title to plot")
plot(output, show_density = TRUE, ci_level = 0.5, fill_color = "purple")
plot(output, plotfun = "hist", pars = "theta", include = FALSE)
plot(output, plotfun = "trace", pars = c("mu", "tau"), inc_warmup = TRUE)
plot(output, plotfun = "rhat")
plot(output, show_density = TRUE, ci_level = 0.5, fill_color = "purple")
stan_scat(output, pars, unconstrain = FALSE,
inc_warmup = FALSE, nrow = NULL, ncol = NULL, ...)
stan_scat(output, pars, unconstrain = FALSE,
inc_warmup = FALSE, nrow = NULL, ncol = NULL)
mu_vs_tau <-stan_scat(output, pars=c("mu", "tau"), color = "blue", size = 4)
library(rstan)
fit <- stan_demo("output", refresh = 0)
print.stanfit(output)
print(output)
traceplot(output)
ainfo <- get_adaptation_info(output)
library(devtools)
library(hBayesDM)
library(rstan)
ainfo <- get_adaptation_info(output)
n <- get_num_upars(output)
fit2<-stan(output=fit)
fit2<-stan(fit=output)
n <- get_num_upars(output)
View(output)
install.packages("bayesplot")
library("bayesplot")
library("rstanarm")
library("ggplot2")
posterior <- as.matrix(output$fit)
View(posterior)
plot_title <- ggtitle("Posterior distributions",
"with medians and 80% intervals")
"with medians and 80% intervals")
mcmc_areas(posterior,
pars = c("mu_alpha", "mu_cons", "mu_lambda"),
prob = 0.8) + plot_title
mcmc_areas(posterior,
pars = c("sigma[1]", "A[1]", "alpha[1]"),
prob = 0.8) + plot_title
# Show the WAIC and LOOIC model fit estimates
printFit(output)
plotInd(posterior)
plotInd(output)
mcmc_areas(posterior,
pars = c("sigma[1]", "A[1]", "alpha[1]"),
prob = 0.8) + plot_title
color_scheme_set("red")
ppc_dens_overlay(y = output$fit$y,
yrep = posterior_predict(output$fit, draws = 50))
color_scheme_set("red")
ppc_dens_overlay(y = posterior$y,
yrep = posterior_predict(posterior$fit, draws = 50))
color_scheme_set("red")
ppc_dens_overlay(y = output[fit[y]],
yrep = posterior_predict(output[fit[y]], draws = 50))
color_scheme_set("red")
ppc_dens_overlay(y = output[fit[y_pred]],
yrep = posterior_predict(output[fit[y_pred]], draws = 50))
View(output)
View(output)
install.packages("rio")
library(rio)
data<-import("igt_data2.txt")
setwd ("G:/My Drive/EP_Year1/IGT analysis/Rmodeling")
data<-import("igt_data2.txt")
View(data)
output$fit %>%
posterior_predict(draws = 500) %>%
ppc_stat_grouped(y = data$trial,
group = data$choice,
stat = "median")
library("dplyr")
color_scheme_set("brightblue")
output$fit %>%
posterior_predict(draws = 500) %>%
ppc_stat_grouped(y = data$trial,
group = data$choice,
stat = "median")
View(fit2)
color_scheme_set("darkgray")
mcmc_scatter(
as.matrix(output$fit),
pars = c("A[1]", "alpha[1]"),
np = nuts_params(output$fit),
np_style = scatter_style_np(div_color = "green", div_alpha = 0.8)
)
color_scheme_set("darkgray")
mcmc_scatter(
as.matrix(output$fit),
pars = c("mu_cons", "alpha[1]"),
np = nuts_params(output$fit),
np_style = scatter_style_np(div_color = "green", div_alpha = 0.8)
)
color_scheme_set("darkgray")
mcmc_scatter(
as.matrix(output$fit),
pars = c("mu_cons", "mu_alpha"),
np = nuts_params(output$fit),
np_style = scatter_style_np(div_color = "green", div_alpha = 0.8)
)
color_scheme_set("red")
mcmc_nuts_energy(posterior)+ ggtitle("NUTS Energy Diagnostic")
color_scheme_set("red")
mcmc_nuts_energy(output)+ ggtitle("NUTS Energy Diagnostic")
View(output)
View(plot_title)
View(output)
fit<-as.matrix(output$fit$`cons[10]`)
fit<-as.matrix(output$cons)
fit<-as.matrix(output$par_dims$cons)
View(data)
color_scheme_set("purple")
ppc_intervals(
y = data$gain,
yrep = posterior_predict(posterior),
x = data$loss,
prob = 0.5
) +
labs(
x = "loss",
y = "gain",
title = "50% posterior predictive intervals \nvs observed gain",
subtitle = "by loss"
) +
panel_bg(fill = "gray95", color = NA) +
grid_lines(color = "white")
library("bayesplot")
library("rstanarm")
library("ggplot2")
color_scheme_set("purple")
ppc_intervals(
y = data$gain,
yrep = posterior_predict(posterior),
x = data$loss,
prob = 0.5
) +
labs(
x = "loss",
y = "gain",
title = "50% posterior predictive intervals \nvs observed gain",
subtitle = "by loss"
) +
panel_bg(fill = "gray95", color = NA) +
grid_lines(color = "white")
install.packages("rstanarm")
library(rstanarm)
ppc_intervals(
y = data$gain,
yrep = posterior_predict(posterior),
x = data$loss,
prob = 0.5
) +
labs(
x = "loss",
y = "gain",
title = "50% posterior predictive intervals \nvs observed gain",
subtitle = "by loss"
) +
panel_bg(fill = "gray95", color = NA) +
grid_lines(color = "white")
ppc_intervals(
y = data$gain,
yrep = posterior_predict(output$fit),
x = data$loss,
prob = 0.5
)
posterior <- as.matrix(output$fit)
ppc_intervals(
y = data$choice,
yrep = posterior_predict(output$fit),
x = data$trial,
prob = 0.5
) +
labs(
x = "loss",
y = "gain",
title = "50% posterior predictive intervals \nvs observed gain",
subtitle = "by loss"
) +
panel_bg(fill = "gray95", color = NA) +
grid_lines(color = "white")
View(output)
View(posterior)
View(output)
output %>%
ggplot(aes(cons, fit)) +
geom_smooth_ci(parVals)
View(posterior)
posterior %>%
ggplot(aes(mu_cons, mu_A)) +
geom_smooth_ci(mu_lambda)
output<-as.data.frame(output)
View(output)
ggplot(posterior, aes(mu_cons, mu_sigma)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
fit<-as.data.frame(posterior)
ggplot(fit, aes(mu_cons, mu_sigma)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
fit<-as.data.frame(posterior)
ggplot(fit, aes(mu_cons, mu_lambda)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
color_scheme_set("darkgray")
fit<-as.data.frame(posterior)
ggplot(fit, aes(mu_cons, mu_lambda)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
fit<-as.data.frame(posterior)
ggplot(fit, aes(mu_cons, mu_A)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
View(fit)
plot(fit)
plot(fit, show_density = TRUE, ci_level = 0.5, fill_color = "purple")
plot(fit, plotfun = "hist", pars = "theta", include = FALSE)
plot(fit, plotfun = "trace", pars = c("mu", "tau"), inc_warmup = TRUE)
plot(fit, plotfun = "rhat") + ggtitle("Example of adding title to plot")
}
plot(fit)
plot(output, show_density = TRUE, ci_level = 0.5, fill_color = "purple")
plot(output, plotfun = "rhat") + ggtitle("Example of adding title to plot")
plot(output, plotfun = "hist", pars = "theta", include = FALSE)
plot(output, plotfun = "trace", pars = c("mu", "tau"), inc_warmup = TRUE)
plot(output, plotfun = "rhat") + ggtitle("Example of adding title to plot")
stan_trace(output, pars, include = TRUE, unconstrain = FALSE,
inc_warmup = FALSE, nrow = NULL, ncol = NULL,
window = NULL)
stan_trace(fit, pars, include = TRUE, unconstrain = FALSE,
inc_warmup = FALSE, nrow = NULL, ncol = NULL,
window = NULL)
stan_trace(fit, pars, include = TRUE, unconstrain = FALSE,
inc_warmup = FALSE, nrow = NULL, ncol = NULL,
window = NULL)
stan_trace(posterior, pars, include = TRUE, unconstrain = FALSE,
inc_warmup = FALSE, nrow = NULL, ncol = NULL,
window = NULL)
stan_hist(fit)
stan_hist(output$fit)
stan_trace(output$fit)
stan_scat(output$fit)
stan_scat(output$fit, pars = c("mu_cons", "mu_A"), color = "blue", size = 4)
(cons_vs_A <- stan_scat(output$fit, pars = c("mu_cons", "mu_A"), color = "blue", size = 4))
cons_vs_A +
ggplot2::coord_flip() +
theme(panel.background = ggplot2::element_rect(fill = "black"))
(cons_vs_A <- stan_scat(output$fit, pars = c("mu_cons", "mu_lambda"), color = "blue", size = 4))
cons_vs_A +
ggplot2::coord_flip() +
theme(panel.background = ggplot2::element_rect(fill = "black"))
color_scheme_set("darkgray")
mcmc_scatter(
as.matrix(output$fit),
pars = c("mu_cons", "mu_A"),
np = nuts_params(output$fit),
np_style = scatter_style_np(div_color = "green", div_alpha = 0.8)
)
color_scheme_set("darkgray")
mcmc_scatter(
as.matrix(output$fit),
pars = c("mu_cons", "mu_lambda"),
np = nuts_params(output$fit),
np_style = scatter_style_np(div_color = "green", div_alpha = 0.8)
)
color_scheme_set("darkgray")
mcmc_scatter(
as.matrix(output$fit),
pars = c("mu_cons", "y_pred"),
np = nuts_params(output$fit),
np_style = scatter_style_np(div_color = "green", div_alpha = 0.8)
)
output[["fit"]]@model_pars
mcmc_scatter(
as.matrix(output$fit),
pars = c("mu_cons", "y_pred"),
np = nuts_params(output$fit),
np_style = scatter_style_np(div_color = "green", div_alpha = 0.8)
)
mcmc_scatter(
as.matrix(output$fit),
pars = c("cons", "y_pred"),
np = nuts_params(output$fit),
np_style = scatter_style_np(div_color = "green", div_alpha = 0.8)
)
mcmc_scatter(
as.matrix(output$fit),
pars = c("log_lik", "y_pred"),
np = nuts_params(output$fit),
np_style = scatter_style_np(div_color = "green", div_alpha = 0.8)
)
mcmc_scatter(
as.matrix(output$fit),
pars = c("cons", "sigma"),
np = nuts_params(output$fit),
np_style = scatter_style_np(div_color = "green", div_alpha = 0.8)
)
mcmc_scatter(
as.matrix(output$fit),
pars = c("cons_pr", "A_pr"),
np = nuts_params(output$fit),
np_style = scatter_style_np(div_color = "green", div_alpha = 0.8)
)
mcmc_scatter(
as.matrix(output$fit),
pars = c("mu_cons", "mu_A"),
np = nuts_params(output$fit),
np_style = scatter_style_np(div_color = "green", div_alpha = 0.8)
)
mcmc_scatter(
as.matrix(output$fit),
pars = c("mucons", "A"),
np = nuts_params(output$fit),
np_style = scatter_style_np(div_color = "green", div_alpha = 0.8)
)
mcmc_scatter(
as.matrix(output$fit),
pars = c("cons", "A"),
np = nuts_params(output$fit),
np_style = scatter_style_np(div_color = "green", div_alpha = 0.8)
)
output[["allIndPars"]][["cons"]]
plot(output[["allIndPars"]][["cons"]])
stan_hist(output[["allIndPars"]][["cons"]])
stan_hist(output$allIndPars$cons)
cons<-as.data.frame(output$allIndPars$cons)
stan_hist(cons)
View(cons)
cons<-as.vector(output$allIndPars$cons)
cons<-as.vector(output$allIndPars$cons)
cons<-as.matrix(output$allIndPars$cons)
stan_hist(cons)
cons<-as.data.frame(output$allIndPars$cons)
View(cons)
setwd("G:/My Drive/EP_Year1/IGT analysis/data/matlab")
#read in data in mat format
mat<-read.csv("G:/My Drive/EP_Year1/IGT analysis/data/matlab/explore.csv")
#read in data in long format
long<-read.csv("G:/My Drive/EP_Year1/IGT analysis/data/matlab/Explore_decks.csv")
mat$Disadvantageous<-(mat$A.count+mat$B.count)
mat$Advantageous<-(mat$C.count+mat$D.count)
mat$E<-mat$E.count
#sum up performance good decks-bad decks
mat$Total<-mat$Advantageous-mat$Disadvantageous
#create a new column with block numbers
library(dplyr)
mat$block <- rep(1:6, each=n)
View(mat)
Etotal<-aggregate(cbind(mat$E, mat$Total), by=list(ID=mat$id), FUN=sum)
Etotal
library(tidyverse)
Etotal<-Etotal %>%
dplyr::rename(
E_choice = V1,
Total = V2,
)
View(Etotal)
View(output)
cons<-as.data.frame(output$allIndPars)
View(cons)
write.csv(cons, "G:/My Drive/EP_Year1/IGT analysis/Rmodeling", row.names=FALSE)
write.csv(cons, "G:/My Drive/EP_Year1/IGT analysis/Rmodeling", row.names=FALSE)
setwd("G:/My Drive/EP_Year1/IGT analysis/Rmodeling")
write.csv(cons, "G:/My Drive/EP_Year1/IGT analysis/Rmodeling", row.names=FALSE)
write.csv(cons, "G:/My Drive/EP_Year1/IGT analysis/Rmodeling/allindpars.csv", row.names=FALSE)
write.csv(Etotal, "G:/My Drive/EP_Year1/IGT analysis/Rmodeling/Etotal.csv", row.names=FALSE)
allindpars<-read.csv("G:/My Drive/EP_Year1/IGT analysis/Rmodeling/allindpars.csv")
Etotal<-read.csv(Etotal, "G:/My Drive/EP_Year1/IGT analysis/Rmodeling/Etotal.csv")
Etotal<-read.csv( "G:/My Drive/EP_Year1/IGT analysis/Rmodeling/Etotal.csv")
merged<-merge(allindpars,Etotal,by.x="id")
View(Etotal)
allindpars<-read.csv("G:/My Drive/EP_Year1/IGT analysis/Rmodeling/allindpars.csv")
merged<-merge(allindpars,Etotal,by.x="ID")
View(merged)
ggplot(merged, aes(x = cons, y = E_choice)) +
geom_line(aes(linetype =E_choice, color=E_choice))+
geom_point(aes(color = E_choice),size=2.5)
library(ggplot2)
library(ggpubr)
theme_set(
theme_minimal() +
theme(legend.position = "top")
)
b <- ggplot(merged, aes(x = cons, y = E_choice))
# Scatter plot with regression line
b + geom_point()+
geom_smooth(method = "lm")
# Add a loess smoothed fit curve
b + geom_point()+
geom_smooth(method = "loess")
b <- ggplot(merged, aes(x = cons, y = E_choice))
# Scatter plot with regression line
b + geom_point()+
geom_smooth(method = "lm")
View(cons)
b <- ggplot(merged, aes(x = alpha, y = E_choice))
# Scatter plot with regression line
b + geom_point()+
geom_smooth(method = "lm")
b <- ggplot(merged, aes(x = A, y = E_choice))
# Scatter plot with regression line
b + geom_point()+
geom_smooth(method = "lm")
b <- ggplot(merged, aes(x = lambda, y = E_choice))
# Scatter plot with regression line
b + geom_point()+
geom_smooth(method = "lm")
b <- ggplot(merged, aes(x = E_choice, y = cons))
# Scatter plot with regression line
b + geom_point()+
geom_smooth(method = "lm")
b <- ggplot(merged, aes(x = lambda, y = cons))
# Scatter plot with regression line
b + geom_point()+
geom_smooth(method = "lm")
knitr::opts_chunk$set(echo = TRUE)
VPP<-igt_vpp(data = "G:/My Drive/EP_Year1/IGT analysis/Rmodeling/igt_data2.txt", niter = 4000, nwarmup = 1000, nchain = 4,
ncore = 4, nthin = 1, inits = "vb", indPars = "mean",
modelRegressor = FALSE, vb = FALSE, inc_postpred = FALSE,
adapt_delta = 0.95, stepsize = 1, max_treedepth = 10)
setwd ("G:/My Drive/EP_Year1/IGT analysis/Rmodeling")
#to change settings for r to run go to https://github.com/stan-dev/rstan/wiki/RStan-Getting-Started
library(devtools)
library(hBayesDM)
library(rstan)
VPP<-igt_vpp(data = "G:/My Drive/EP_Year1/IGT analysis/Rmodeling/igt_data2.txt", niter = 4000, nwarmup = 1000, nchain = 4,
ncore = 4, nthin = 1, inits = "vb", indPars = "mean",
modelRegressor = FALSE, vb = FALSE, inc_postpred = FALSE,
adapt_delta = 0.95, stepsize = 1, max_treedepth = 10)
